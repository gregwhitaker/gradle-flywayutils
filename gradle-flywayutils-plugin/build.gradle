plugins {
    id "idea"
    id "groovy"
    id "java-gradle-plugin"
    id "maven-publish"
    id "com.gradle.plugin-publish"      version "0.12.0"
    id "org.asciidoctor.jvm.convert"    version "3.1.0"
    id "com.adarshr.test-logger"        version "2.1.0"
}

// Project Configuration
project.group           = "com.github.gregwhitaker.flywayutils"
project.version         = "0.1.0"
project.description     = "Gradle plugin for interacting with mock AWS endpoints using LocalStack"

project.ext.name        = "gradle-flywayutils-plugin"
project.ext.pluginId    = "com.github.gregwhitaker.flywayutils"
project.ext.scm         = "scm:git@github.com/gregwhitaker/gradle-flywayutils.git"
project.ext.url         = "https://github.com/gregwhitaker/gradle-flywayutils.git"

repositories {
    mavenCentral()
}

dependencies {
    gradleApi()

    implementation 'com.squareup:javapoet:1.13.0'
    implementation 'info.picocli:picocli:4.1.4'
    implementation 'org.apache.commons:commons-lang3:3.11'
    implementation 'org.flywaydb:flyway-core:6.0.8'

    testImplementation gradleTestKit()
    testImplementation("org.spockframework:spock-core:1.1-groovy-2.4") {
        exclude module: "groovy-all"
    }
}

// Publishing
gradlePlugin {
    plugins {
        flywayutilsPlugin {
            id = pluginId
            displayName = project.ext.name
            description = project.description
            implementationClass = "com.github.gregwhitaker.flywayutils.FlywayUtilsPlugin"
        }
    }
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/gregwhitaker/gradle-flywayutils")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GPR_USER")
                password = project.findProperty("gpr.key") ?: System.getenv("GPR_API_KEY")
            }
        }
        mavenLocal()
    }

    publications {
        gpr(MavenPublication) {
            from(components.java)
        }
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

// Documentation
asciidoctor {
    baseDirFollowsSourceDir()
    version = project.version
    sourceDir = file("src/docs/asciidoc")
    attributes = [
        "toc": "left",
        "source-highlighter": "prettify",
        "icons": "font",
        "numbered": "",
        "idprefix": "",
        "docinfo1": "true",
        "sectanchors": "true",
        "samplesCodeDir": file("src/docs/samples")
    ]
}

task buildDocSite(type: Copy) {
    group('Documentation')
    description('Builds the documentation website for the plugin.')
    dependsOn('build', 'cleanDocSite', 'asciidoctor')
    destinationDir = file("../docs")

    from ("${buildDir}/docs/asciidoc") {
        include "index.html"
    }

    from ("${buildDir}/docs/javadoc") {
        into "javadoc"
    }

    doLast {
        new File(rootDir, "../docs/.nojekyll").createNewFile()
    }
}

task cleanDocSite(type: Delete) {
    group('Documentation')
    description('Deletes the documentation website for the plugin.')
    delete "docsite"
}
